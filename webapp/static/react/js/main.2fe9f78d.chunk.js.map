{"version":3,"sources":["Navbar/images/BackArrow.svg","App/Repository/images/git_logo.svg","App/Commit/images/git_logo.svg","App/Edit/images/git_logo.svg","Navbar/Navbar.jsx","App/Repository/Repository.jsx","App/Commit/Commit.jsx","App/Edit/Edit.jsx","App/App.jsx","App/backendCommunication.jsx","RouteWrapper/RouteWrapper.jsx","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","getPathBlock","bind","getPathString","path_string","this","repository","commit","i","path","length","map","value","index","Fragment","style","whiteSpace","href","console","log","className","onClick","window","open","src","BackArrow","alt","getPrevButton","Component","Repository","GitLogo","name","Commit","hash","Edit","App","getDatabaseLink","getBackendPathString","getRepoContent","getCommitContent","getEditContent","state","repositories","commits","edits","url","params","Promise","resolve","reject","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","query_string","key","forEach","element","toString","send","JSON","stringify","BackendGET","then","resolveMessage","resolveJSON","parse","setState","undefined","catch","rejectMessage","content","location","pathname","page_content","RouteWrapper","update","slice","split","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.2fe9f78d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/BackArrow.87285bb7.svg\";","module.exports = __webpack_public_path__ + \"media/git_logo.48f45c2e.svg\";","module.exports = __webpack_public_path__ + \"media/git_logo.48f45c2e.svg\";","module.exports = __webpack_public_path__ + \"media/git_logo.48f45c2e.svg\";","import React, {Component} from 'react';\n\nimport BackArrow from \"./images/BackArrow.svg\"\n\nimport './Navbar.scss';\n\nexport class Navbar extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.getPathBlock = this.getPathBlock.bind(this);\n\t\tthis.getPathString = this.getPathString.bind(this);\n\t}\n\n\tgetPathString() {\n\t\tlet path_string = \"/\" + this.props.repository + \"/\" + this.props.commit;\n\t\tfor (let i=0; i<this.props.path.length; i++) {\n\t\t\tpath_string += \"/\" + this.props.path[i];\n\t\t}\n\t\treturn path_string;\n\t}\n\n\tgetPathBlock() {\n\t\tlet path_string = this.props.path.map((value, index) => (\n\t\t\t<React.Fragment>\n\t\t\t\t{index !== 0 && <div style={{whiteSpace: \"pre\"}}> / </div>}\n\t\t\t\t<a href={this.getPathString()}>{value}</a>\n\t\t\t</React.Fragment>\n\t\t));\n\t\tconsole.log(this.props.path);\n\t\tconsole.log(path_string);\n\t\treturn path_string;\n\t}\n\n\tgetPrevButton() {\n\t\tlet path_string = \"/\";\n\n\t\tif (this.props.repository !== \"\" && this.props.commit !== \"\") {\n\t\t\tpath_string += this.props.repository + \"/\";\n\t\t\tif (this.props.path.length !== 0) {\n\t\t\t\tpath_string += this.props.commit + \"/\";\n\t\t\t}\n\t\t}\n\n\t\tfor (let i=0; i<this.props.path.length - 1; i++) {\n\t\t\tpath_string += this.props.path[i] + \"/\";\n\t\t}\n\n\t\tconsole.log({path_string: path_string});\n\n\t\treturn (\n\t\t\t<div className=\"PrevButton\" onClick={() => window.open(\"/visual\" + path_string, \"_self\")}>\n\t\t\t\t<img src={BackArrow} alt=\"Go Back\"/>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Navbar\">\n\t\t\t\t{this.props.repository !== \"\" && this.getPrevButton()}\n\t\t\t\t<div className=\"Path\">{this.getPathBlock()}</div>\n\t\t\t\t<div className=\"Commit\">\n\t\t\t\t\t<strong>Commit:</strong> {this.props.commit !== \"\" ? this.props.commit : \"-\"}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"Repository\">\n\t\t\t\t\t<strong>Repository:</strong> {this.props.repository !== \"\" ? this.props.repository : \"-\"}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n","import React, {Component} from 'react';\nimport GitLogo from './images/git_logo.svg';\n\nimport './Repository.scss';\n\nexport class Repository extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Repository\" onClick={() => window.open(this.props.href, \"_self\")}>\n\t\t\t\t<img className=\"Logo\" src={GitLogo} alt=\"Git Logo\"/>\n\t\t\t\t<div className=\"Label\">{this.props.name}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React, {Component} from 'react';\nimport GitLogo from './images/git_logo.svg';\n\nimport './Commit.scss';\n\nexport class Commit extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Commit\" onClick={() => window.open(this.props.href, \"_self\")}>\n\t\t\t\t<img className=\"Logo\" src={GitLogo} alt=\"Git Logo\"/>\n\t\t\t\t<div className=\"Label\">{this.props.hash}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React, {Component} from 'react';\nimport GitLogo from './images/git_logo.svg';\n\nimport './Edit.scss';\n\nexport class Edit extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Edit\">\n\t\t\t\t<img className=\"Logo\" src={GitLogo} alt=\"Git Logo\"/>\n\t\t\t\t<div className=\"Label\">{this.props.name}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, {Component} from 'react';\n\nimport './App.scss';\nimport {Navbar} from \"../Navbar/Navbar\";\nimport {BackendGET} from \"./backendCommunication\";\n\nimport {Repository} from \"./Repository/Repository\";\nimport {Commit} from \"./Commit/Commit\";\nimport {Edit} from \"./Edit/Edit\";\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.getDatabaseLink = this.getDatabaseLink.bind(this);\n\t\tthis.getBackendPathString = this.getBackendPathString.bind(this);\n\n\t\tthis.getRepoContent = this.getRepoContent.bind(this);\n\t\tthis.getCommitContent = this.getCommitContent.bind(this);\n\t\tthis.getEditContent = this.getEditContent.bind(this);\n\n\t\tthis.state = {\n\t\t\trepositories: [],\n\t\t\tcommits: [],\n\t\t\tedits: []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tlet url = this.getDatabaseLink();\n\t\tconsole.log({url: url, path: this.props.path});\n\t\tBackendGET(url).then((resolveMessage) => {\n\t\t\tlet resolveJSON = JSON.parse(resolveMessage);\n\t\t\tconsole.log(resolveJSON);\n\n\t\t\tif (this.props.repository === \"\") {\n\t\t\t\tthis.setState({\n\t\t\t\t\trepositories: resolveJSON[\"repositories\"]\n\t\t\t\t});\n\t\t\t} else if (this.props.commit === \"\") {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcommits: resolveJSON[\"commits\"]\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (resolveJSON[\"edit\"].length === 0) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tedits: undefined\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tedits: resolveJSON[\"edit\"]\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t}).catch((rejectMessage) => {\n\t\t\tconsole.log(\"Nothing Here!\");\n\t\t});\n\t}\n\n\tgetDatabaseLink() {\n\t\tlet url = \"https://hackatum2019.herokuapp.com/\";\n\n\t\tif (this.props.repository === \"\") {\n\t\t\treturn url;\n\t\t}\n\t\turl += \"repository/\" + this.props.repository + \"/\";\n\n\t\tif (this.props.commit === \"\") {\n\t\t\treturn url;\n\t\t}\n\t\turl += \"commit/\" + this.props.commit + \"/\";\n\n\t\tif (this.props.path.length === 0) {\n\t\t\treturn url;\n\t\t}\n\t\turl += \"file/\" + this.getBackendPathString() + \"/\";\n\n\t\treturn url;\n\t}\n\n\tgetBackendPathString() {\n\t\tlet path_string = \"\";\n\t\tfor (let i = 0; i < this.props.path.length; i++) {\n\t\t\tpath_string += \"___\" + this.props.path[i];\n\t\t}\n\t\treturn path_string;\n\t}\n\n\tgetRepoContent() {\n\t\tlet content;\n\n\t\tif (this.state.repositories.length === 0) {\n\t\t\tcontent = <div className=\"Empty\">Not keeping track of any repositories</div>;\n\t\t} else {\n\t\t\tcontent = this.state.repositories.map((value, index) => (\n\t\t\t\t<Repository name={value} href={\"/\" + value}/>\n\t\t\t));\n\t\t}\n\t\treturn <div className=\"Content\">{content}</div>;\n\t}\n\n\tgetCommitContent() {\n\t\tlet content;\n\n\t\tif (this.state.commits.length === 0) {\n\t\t\tcontent = <div className=\"Empty\">Not keeping track of any commits</div>;\n\t\t} else {\n\t\t\tcontent = this.state.commits.map((value, index) => (\n\t\t\t\t<Commit hash={value} href={window.location.pathname + \"/\" + value}/>\n\t\t\t));\n\t\t}\n\t\treturn <div className=\"Content\">{content}</div>;\n\t}\n\n\tgetEditContent() {\n\t\tlet content;\n\n\t\tif (this.state.edits.length === 0 || this.state.edits.length === undefined) {\n\t\t\tcontent = <div className=\"Empty\">Not keeping track of any edits</div>;\n\t\t} else {\n\t\t\tcontent = this.state.edits.map((value, index) => (\n\t\t\t\t<Edit name={value[\"file_id\"]} href={window.location.pathname + \"/\" + this.props.repository + \"/\" + value}/>\n\t\t\t));\n\t\t}\n\t\treturn <div className=\"Content\">{content}</div>;\n\t}\n\n\trender() {\n\t\tlet page_content;\n\n\t\tif (this.props.repository === \"\") {\n\t\t\tpage_content = this.getRepoContent();\n\t\t} else if (this.props.commit === \"\"){\n\t\t\tpage_content = this.getCommitContent();\n\t\t} else {\n\t\t\tpage_content = this.getEditContent();\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Navbar path={this.props.path}\n\t\t\t\t        repository={this.props.repository}\n\t\t\t\t        commit={this.props.commit}/>\n\t\t\t\t{page_content}\n\t\t\t</div>\n\n\t\t);\n\t}\n}\n\nexport default App;\n","\nexport function BackendPOST(url, params) {\n\n    return new Promise((resolve, reject) => {\n\n        let xmlhttp;\n\n        if (window.XMLHttpRequest) {\n            // code for modern browsers\n            xmlhttp = new XMLHttpRequest();\n\n            xmlhttp.onreadystatechange = function() {\n\n                /*\n                https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp\n                https://malcoded.com/posts/react-http-requests-axios/\n                */\n\n                /*\n                this.readyState = 0: request not initialized\n                                  1: server connection established\n                                  2: request received\n                                  3: processing request\n                                  4: request finished and response is ready\n                */\n\n                if (this.readyState === 4) {\n                    if (this.status === 200) {\n                        resolve(this.responseText);\n                    } else {\n                        reject(\"\\nAJAX Request Rejected: \" + this.responseText);\n                    }\n                }\n            };\n\n            let query_string = JSON.stringify(params);\n            console.log({Source: \"POSTfkt\", query_string: query_string});\n\n            xmlhttp.open(\"POST\", url, true);\n            xmlhttp.send(query_string)\n\n        }\n\n    });\n\n}\n\n\n\n\nexport function BackendGET(url, params) {\n\n    return new Promise((resolve, reject) => {\n\n        let xmlhttp;\n\n        if (window.XMLHttpRequest) {\n            // code for modern browsers\n            xmlhttp = new XMLHttpRequest();\n\n            xmlhttp.onreadystatechange = function() {\n\n                /*\n                https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp\n                https://malcoded.com/posts/react-http-requests-axios/\n                */\n\n                /*\n                this.readyState = 0: request not initialized\n                                  1: server connection established\n                                  2: request received\n                                  3: processing request\n                                  4: request finished and response is ready\n                */\n\n                if (this.readyState === 4) {\n                    if (this.status === 200) {\n                        resolve(this.responseText);\n                    } else {\n                        reject(\"\\nAJAX Request Rejected: \" + this.responseText);\n                    }\n                }\n            };\n\n            let query_string = \"?\";\n\n            for (let key in params) {\n                if (typeof (params[key]) !== \"string\") {\n                    query_string += key + \"=\";\n                    params[key].forEach((element) => {\n                        query_string += element.toString() + \",\";\n                    });\n                } else {\n                    if (params[key] !== null) {\n                        query_string += key + \"=\" + params[key].toString();\n                    }\n                }\n                query_string += \"&\";\n            }\n\n            xmlhttp.open(\"GET\", url + query_string, true);\n            // xmlhttp.send(JSON.stringify(params))\n            xmlhttp.send(JSON.stringify(params))\n\n        }\n\n    });\n\n}","import React, {Component} from 'react';\nimport App from '../App/App';\n\nexport class RouteWrapper extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\trepository: \"\",\n\t\t\tcommit: \"\",\n\t\t\tpath: []\n\t\t};\n\n\t\tthis.update = this.update.bind(this);\n\t}\n\n\tcomponentWillMount() {\n\t\tlet path = [];\n\t\tif (window.location.pathname !== \"/\") {\n\t\t\tpath = window.location.pathname.slice(7).split(\"/\");\n\t\t}\n\n\t\tlet repository = \"\", commit = \"\";\n\t\tif (path.length > 1) {\n\t\t\trepository = path[1];\n\t\t}\n\t\tif (path.length > 2) {\n\t\t\tcommit = path[2];\n\t\t}\n\n\t\tthis.setState({\n\t\t\trepository: repository,\n\t\t\tcommit: commit,\n\t\t\tpath: path\n\t\t});\n\t}\n\n\tupdate() {\n\t\tlet path = [];\n\t\tif (window.location.pathname !== \"/\") {\n\t\t\tpath = window.location.pathname.slice(7).split(\"/\");\n\t\t}\n\n\t\tlet repository = \"\", commit = \"\";\n\t\tif (path.length > 1) {\n\t\t\trepository = path[1];\n\t\t}\n\t\tif (path.length > 2) {\n\t\t\tcommit = path[2];\n\t\t}\n\n\t\tthis.setState({\n\t\t\trepository: repository,\n\t\t\tcommit: commit,\n\t\t\tpath: path\n\t\t});\n\t\tconsole.log(\"Wrapper updated\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<App repository={this.state.repository}\n\t\t\t     commit={this.state.commit}\n\t\t\t     path={this.state.path.slice(3)}/>\n\t\t);\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {RouteWrapper} from \"./RouteWrapper/RouteWrapper\";\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RouteWrapper />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}